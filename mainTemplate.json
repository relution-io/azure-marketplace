{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"serverUsername": {
			"type": "string",
			"defaultValue": "centos",
			"metadata": {
				"description": "Admin username used when provisioning virtual machines"
			}
		},
		"serverAuthenticationType": {
			"type": "string",
			"defaultValue": "password",
			"allowedValues": [
				"password",
				"sshPublicKey"
			],
			"metadata": {
				"description": "Choose a password or ssh public key for the Admin username used to access virtual machines"
			}
		},
		"serverPassword": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "Admin password used to access virtual machines"
			}
		},
		"serverSshPublicKey": {
			"type": "securestring",
			"defaultValue": "",
			"metadata": {
				"description": "Admin ssh public key used to access virtual machines"
			}
		},
		"adminUsername": {
			"type": "string",
			"defaultValue": "adminUser"
		},
		"adminGivenname": {
			"type": "string",
			"defaultValue": "givenname"
		},
		"adminSurname": {
			"type": "string",
			"defaultValue": "surname"
		},
		"adminEmail": {
			"type": "string",
			"defaultValue": "info@relution.io"
		},
		"adminPassword": {
			"type": "securestring"
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location where resources will be provisioned.  A value of 'ResourceGroup' will deploy the resource to the same location of the resource group the resources are provisioned into"
			}
		},
		"baseUrl": {
			"type": "string",
			"metadata": {
				"description": "The base URL for dependent assets",
				"artifactsBaseUrl": ""
			},
			"defaultValue": "https://raw.githubusercontent.com/relution-io/azure-marketplace/master/"
		}
	},
	"variables": {
		"apiVersion": "2015-06-15",
		"resourceGroupNameToLower": "[toLower(resourceGroup().name)]",
		"dbServerName": "[concat(uniqueString(resourceGroup().id, deployment().name), '-relution-db')]",
		"dbName": "relution",
		"dbUsername": "relution",
		"dbPassword": "[concat('R3lu10N',uniqueString(resourceGroup().id, deployment().name, parameters('serverPassword')),'$23')]",
		"computerNamePrefix": "[concat(variables('uniqueNamePrefix'),'-applicationserver')]",
		"password_osProfile": {
			"computerNamePrefix": "[concat(variables('uniqueNamePrefix'),'-applicationserver')]",
			"adminUsername": "[parameters('serverUsername')]",
			"adminPassword": "[parameters('serverPassword')]"
		},
		"sshPublicKey_osProfile": {
			"computerNamePrefix": "[concat(variables('uniqueNamePrefix'),'-applicationserver')]",
			"adminUsername": "[parameters('serverUsername')]",
			"linuxConfiguration": {
				"disablePasswordAuthentication": "true",
				"ssh": {
					"publicKeys": [
						{
							"path": "[concat('/home/', parameters('serverUsername'), '/.ssh/authorized_keys')]",
							"keyData": "[parameters('serverSshPublicKey')]"
						}
					]
				}
			}
		},
		"osProfile": "[variables(concat(parameters('serverAuthenticationType'), '_osProfile'))]",
		"OSDiskStorageAccountType": "Standard_LRS",
		"dnsinfo": "YVkwY1NLdXJNaE55RkpSTDNOQUlrWW5OMVhZODVBbWdiaTRkanpYSAo=",
		"virtualNetworkName": "[concat(variables('resourceGroupNameToLower'),'vnet')]",
		"uniqueNamePrefix": "[concat(variables('resourceGroupNameToLower'),'-relution')]",
		"appserversubnetname": "appserver",
		"newAppServerSubnetAddressPrefix": "[concat('192.168.1.32/27')]",
		"appNSGName": "[concat(variables('uniqueNamePrefix'),'-app-nsg')]",
		"newStorageAccountSuffix": "[concat('vmss', variables('resourceGroupNameToLower'))]",
		"storageAccountPrefix": [
			"a",
			"g",
			"m",
			"s",
			"y"
		],
		"wadProcessorMetricName": "Percentage CPU",
		"subnetnameapplicationserver": "appserver",
		"loadBalancerNameapplicationserver": "[concat(variables('uniqueNamePrefix'),'LoadBalancer-applicationserver')]",
		"publicIPAddressNameapplicationserver": "[concat(variables('uniqueNamePrefix'),'LoadBalancerIP-applicationserver')]",
		"nicNameapplicationserver": "networkInterface1-applicationserver",
		"vnetIDapplicationserver": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
		"publicIPAddressIDapplicationserver": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressNameapplicationserver')))]",
		"lbIDapplicationserver": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerNameapplicationserver'))]",
		"nicIdapplicationserver": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicNameapplicationserver'))]",
		"frontEndIPConfigIDapplicationserver": "[concat(variables('lbIDapplicationserver'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"loadbalancerBackendpoolIdapplicationserver": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',variables('resourceGroupNameToLower'), '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerNameapplicationserver'), '/backendAddressPools/bepool1')]"
	},
	"resources": [
		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"192.168.0.0/16"
					]
				},
				"subnets": [
					{
						"name": "shared",
						"properties": {
							"addressPrefix": "192.168.0.1/24"
						}
					}
				]
			}
		},
		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[variables('appNSGName')]",
			"location": "[parameters('location')]",
			"tags": {},
			"properties": {
				"securityRules": [
					{
						"name": "http-rule",
						"properties": {
							"description": "Allow HTTP",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "80",
							"sourceAddressPrefix": "Internet",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 100,
							"direction": "Inbound"
						}
					},
					{
						"name": "https-rule",
						"properties": {
							"description": "Allow HTTPS",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "443",
							"sourceAddressPrefix": "Internet",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 200,
							"direction": "Inbound"
						}
					},
					{
						"name": "ssh-rule",
						"properties": {
							"description": "Allow WEB",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "Internet",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 101,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks/subnets",
			"apiVersion": "[variables('apiVersion')]",
			"name": "[concat(variables('virtualNetworkName'), '/', variables('appserversubnetname'))]",
			"location": "[parameters('location')]",
			"properties": {
				"addressPrefix": "[variables('newAppServerSubnetAddressPrefix')]",
				"networkSecurityGroup": {
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('appNSGName'))]"
				}
			},
			"dependsOn": [
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
				"[concat('Microsoft.Network/networkSecurityGroups/', variables('appNSGName'))]"
			]
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[concat(variables('storageAccountPrefix')[copyIndex()], variables('newStorageAccountSuffix'))]",
			"apiVersion": "[variables('apiVersion')]",
			"copy": {
				"name": "storageLoop",
				"count": 5
			},
			"location": "[parameters('location')]",
			"properties": {
				"accountType": "[variables('OSDiskStorageAccountType')]"
			}
		},
		{
			"name": "autoscalewad-applicationserver",
			"type": "Microsoft.Insights/autoscaleSettings",
			"location": "[parameters('location')]",
			"apiVersion": "2015-04-01",
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('uniqueNamePrefix'),'-applicationserver')]"
			],
			"tags": {
				"displayName": "AutoScaleVMSS AutoScale"
			},
			"properties": {
				"name": "autoscalewad-applicationserver",
				"targetResourceUri": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('resourceGroupNameToLower'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('uniqueNamePrefix'),'-applicationserver')]",
				"enabled": true,
				"profiles": [
					{
						"name": "Profile1",
						"capacity": {
							"minimum": "1",
							"maximum": "1",
							"default": "1"
						},
						"rules": [
							{
								"metricTrigger": {
									"metricName": "[variables('wadProcessorMetricName')]",
									"metricNamespace": "",
									"metricResourceUri": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('resourceGroupNameToLower'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('uniqueNamePrefix'),'-applicationserver')]",
									"timeGrain": "PT1M",
									"statistic": "Average",
									"timeWindow": "PT5M",
									"timeAggregation": "Average",
									"operator": "GreaterThan",
									"threshold": 80
								},
								"scaleAction": {
									"direction": "Increase",
									"type": "ChangeCount",
									"value": "1",
									"cooldown": "PT5M"
								}
							},
							{
								"metricTrigger": {
									"metricName": "[variables('wadProcessorMetricName')]",
									"metricNamespace": "",
									"metricResourceUri": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('resourceGroupNameToLower'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('uniqueNamePrefix'),'-applicationserver')]",
									"timeGrain": "PT1M",
									"statistic": "Average",
									"timeWindow": "PT5M",
									"timeAggregation": "Average",
									"operator": "LessThan",
									"threshold": 30
								},
								"scaleAction": {
									"direction": "Decrease",
									"type": "ChangeCount",
									"value": "1",
									"cooldown": "PT1M"
								}
							}
						]
					}
				]
			}
		},
		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[concat(variables('publicIPAddressNameapplicationserver'))]",
			"location": "[parameters('location')]",
			"properties": {
				"publicIPAllocationMethod": "static",
				"dnsSettings": {
					"domainNameLabel": "[toLower(variables('uniqueNamePrefix'))]"
				}
			}
		},
		{
			"apiVersion": "[variables('apiVersion')]",
			"name": "[variables('loadBalancerNameapplicationserver')]",
			"type": "Microsoft.Network/loadBalancers",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressNameapplicationserver'))]"
			],
			"properties": {
				"frontendIPConfigurations": [
					{
						"name": "loadBalancerFrontEnd",
						"properties": {
							"publicIPAddress": {
								"id": "[variables('publicIPAddressIDapplicationserver')]"
							}
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "bepool1"
					}
				],
				"inboundNatPools": [
					{
						"name": "natpool1",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[variables('frontEndIPConfigIDapplicationserver')]"
							},
							"protocol": "tcp",
							"frontendPortRangeStart": 40000,
							"frontendPortRangeEnd": 40999,
							"backendPort": 22
						}
					}
				],
				"loadBalancingRules": [
					{
						"name": "LBRule1",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[variables('frontEndIPConfigIDapplicationserver')]"
							},
							"backendAddressPool": {
								"id": "[variables('loadbalancerBackendpoolIdapplicationserver')]"
							},
							"protocol": "Tcp",
							"frontendPort": 80,
							"backendPort": 80,
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": 5,
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers/',variables('loadBalancerNameapplicationserver')),'/probes/tcpProbe1')]"
							}
						}
					},
					{
						"name": "LBRule2",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[variables('frontEndIPConfigIDapplicationserver')]"
							},
							"backendAddressPool": {
								"id": "[variables('loadbalancerBackendpoolIdapplicationserver')]"
							},
							"protocol": "Tcp",
							"frontendPort": 443,
							"backendPort": 443,
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": 5,
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers/',variables('loadBalancerNameapplicationserver')),'/probes/tcpProbe2')]"
							}
						}
					}
				],
				"probes": [
					{
						"name": "tcpProbe1",
						"properties": {
							"protocol": "Tcp",
							"port": 80,
							"intervalInSeconds": 5,
							"numberOfProbes": 2
						}
					},
					{
						"name": "tcpProbe2",
						"properties": {
							"protocol": "Tcp",
							"port": 443,
							"intervalInSeconds": 5,
							"numberOfProbes": 2
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Sql/servers",
			"kind": "v12.0",
			"name": "[variables('dbServerName')]",
			"apiVersion": "2014-04-01",
			"location": "[parameters('location')]",
			"properties": {
				"administratorLogin": "[variables('dbUsername')]",
				"administratorLoginPassword": "[variables('dbPassword')]",
				"version": "12.0"
			},
			"dependsOn": [],
			"resources": [
				{
					"type": "databases",
					"name": "[variables('dbName')]",
					"apiVersion": "2014-04-01",
					"location": "[parameters('location')]",
					"properties": {
						"edition": "Basic",
						"collation": "SQL_Latin1_General_CP1_CI_AS",
						"maxSizeBytes": "1073741824",
						"requestedServiceObjectiveName": "Basic"
					},
					"dependsOn": [
						"[resourceId('Microsoft.Sql/servers', variables('dbServerName'))]"
					]
				},
				{
					"type": "firewallrules",
					"kind": "v12.0",
					"name": "AllowAllIps",
					"apiVersion": "2014-04-01",
					"location": "[parameters('location')]",
					"properties": {
						"startIpAddress": "0.0.0.0",
						"endIpAddress": "0.0.0.0"
					},
					"dependsOn": [
						"[resourceId('Microsoft.Sql/servers', variables('dbServerName'))]"
					]
				}
			]
		},
		{
			"type": "Microsoft.Compute/virtualMachineScaleSets",
			"apiVersion": "[variables('apiVersion')]",
			"name": "[concat(variables('uniqueNamePrefix'),'-applicationserver')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Storage/storageAccounts/a', variables('newStorageAccountSuffix'))]",
				"[concat('Microsoft.Storage/storageAccounts/g', variables('newStorageAccountSuffix'))]",
				"[concat('Microsoft.Storage/storageAccounts/m', variables('newStorageAccountSuffix'))]",
				"[concat('Microsoft.Storage/storageAccounts/s', variables('newStorageAccountSuffix'))]",
				"[concat('Microsoft.Storage/storageAccounts/y', variables('newStorageAccountSuffix'))]",
				"[concat('Microsoft.Network/loadBalancers/',variables('loadBalancerNameapplicationserver'))]"
			],
			"sku": {
				"name": "Standard_A1",
				"tier": "Standard",
				"capacity": 2
			},
			"properties": {
				"upgradePolicy": {
					"mode": "Automatic"
				},
				"virtualMachineProfile": {
					"storageProfile": {
						"osDisk": {
							"vhdContainers": [
								"[concat('https://a', variables('newStorageAccountSuffix'), '.blob.core.windows.net/vmss')]",
								"[concat('https://g', variables('newStorageAccountSuffix'), '.blob.core.windows.net/vmss')]",
								"[concat('https://m', variables('newStorageAccountSuffix'), '.blob.core.windows.net/vmss')]",
								"[concat('https://s', variables('newStorageAccountSuffix'), '.blob.core.windows.net/vmss')]",
								"[concat('https://y', variables('newStorageAccountSuffix'), '.blob.core.windows.net/vmss')]"
							],
							"name": "vmssosdisk",
							"caching": "ReadOnly",
							"createOption": "FromImage"
						},
						"imageReference": {
							"publisher": "OpenLogic",
							"offer": "CentOS",
							"sku": "7.2",
							"version": "latest"
						}
					},
					"osProfile": "[variables('osProfile')]",
					"networkProfile": {
						"networkInterfaceConfigurations": [
							{
								"name": "nic1",
								"properties": {
									"primary": true,
									"ipConfigurations": [
										{
											"name": "ip1",
											"properties": {
												"subnet": {
													"id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('resourceGroupNameToLower'), '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetnameapplicationserver'))]"
												},
												"loadBalancerBackendAddressPools": [
													{
														"id": "[variables('loadbalancerBackendpoolIdapplicationserver')]"
													}
												],
												"loadBalancerInboundNatPools": [
													{
														"id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/',variables('resourceGroupNameToLower'), '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerNameapplicationserver'), '/inboundNatPools/natpool1')]"
													}
												]
											}
										}
									]
								}
							}
						]
					},
					"extensionProfile": {
						"extensions": [
							{
								"name": "CustomScriptExtensionVMSS",
								"properties": {
									"publisher": "Microsoft.OSTCExtensions",
									"type": "CustomScriptForLinux",
									"typeHandlerVersion": "1.4",
									"autoUpgradeMinorVersion": true,
									"settings": {
										"fileUris": [
											"[concat(parameters('baseUrl'),'/script.sh')]"
										]
									},
									"protectedSettings": {
										"commandToExecute": "[concat('sh script.sh --dns_host ',variables('resourceGroupNameToLower'),' --dns_domain ',parameters('location'),'.cloudapp.azure.com --db_type mssql --db_host ',variables('dbServerName'),'.database.windows.net --db_port 1433 --db_name ',variables('dbName'),' --db_user ',variables('dbUsername'),' --db_password ',variables('dbPassword'),' --admin_username ',parameters('adminUsername'),' --admin_password ',parameters('adminPassword'),' --admin_email ',parameters('adminEmail'),' --admin_givenname ',parameters('adminGivenname'),' --admin_surname ',parameters('adminSurname'),' -m QWdFajRJeGpyOHl4b2tRNFVVdkVFWlRYdlJNcVlkWXNYRVRqZTI5cnI4Y0I= -a QUtJQUlGVE5SV1NYNDJQWlVYSVEK -s ',variables('dnsinfo'))]"
									}
								}
							}
						]
					}
				}
			}
		}
	]
}